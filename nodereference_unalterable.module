<?php
// $Id: nodereference_unalterable.module,v 1.26 2010/03/13 01:45:36 quicksketch Exp $

/**
 * @file
 *   Adds a "URL" widget to the Node Reference field.
 */

/**
 * Implementation of hook_theme().
 */
function nodereference_unalterable_theme() {
  return array(
    'nodereference_unalterable' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function nodereference_unalterable_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'content_field_edit_form' && isset($form['#field']) && $form['#field']['widget']['type'] == 'nodereference_unalterable') {
    // Hide settings that don't apply to this widget.
    $form['field']['multiple']['#type'] = 'value';
    $form['widget']['description']['#title'] = t('Fallback widget help text');
    $form['widget']['description']['#weight'] = -1;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function nodereference_unalterable_widget_info() {
  return array(
    'nodereference_unalterable' => array(
      'label' => t('Unalterable'),
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_NONE,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function nodereference_unalterable_elements() {
  return array(
    'nodereference_unalterable' => array(
      '#input' => TRUE,
      '#columns' => array('nid'),
      '#delta' => 0,
      '#process' => array('nodereference_unalterable_process'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function nodereference_unalterable_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      if ($widget['type'] == 'nodereference_unalterable') {
        $form['fallback'] = array(
          '#type' => 'radios',
          '#title' => t('Fallback behavior'),
          '#options' => array(
            'autocomplete' => t('Use autocomplete widget'),
            'select' => t('Use select list widget'),
            //'page_not_found' => t('Display page not found error'),
            'leave_blank' => t('Leave the field blank'),
          ),
          '#default_value' => isset($widget['fallback']) ? $widget['fallback'] : 'autocomplete',
          '#description' => t('If no content is referenced in the URL, determine how the form should be handled.'),
          '#required' => TRUE,
          '#element_validate' => array('nodereference_unalterable_fallback_validate'),
          '#weight' => -3,
        );
        $form['edit_fallback'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use fallback behavior when editing content'),
          '#default_value' => isset($widget['edit_fallback']) ? $widget['edit_fallback'] : FALSE,
          '#weight' => -2,
        );
        $form['invalid_fallback'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use fallback behavior when current stored selection is not valid anymore'),
          '#default_value' => isset($widget['invalid_fallback']) ? $widget['invalid_fallback'] : FALSE,
          '#weight' => -2,
        );

        // @TODO: This should get replaced through views implementation or other safe stuff.
        $form['restrict_callback'] = array(
          '#type' => 'textfield',
          '#title' => t('Callback function to retrieve valid node IDs on creation'),
          '#default_value' => isset($widget['restrict_callback']) ? $widget['restrict_callback'] : FALSE,
          '#weight' => 10,
          '#descrpiption' => t('Optional callback to limit the allowed values'),
        );
      }
      return $form;

    case 'save':
      return array('fallback', 'edit_fallback', 'invalid_fallback', 'restrict_callback');
  }
}

/**
 * Element validation function to ensure invalid options are not selected.
 */
function nodereference_unalterable_fallback_validate($element, &$form_state) {
  if ($form_state['values']['required'] && $form_state['values']['fallback'] == 'leave_blank') {
    form_error($element, t('The fallback behavior cannot be left blank if this field is also required.'));
  }
}

/**
 * FAPI #element_validate callback for the nodereference_autocomplete widget.
 *
 * This function doesn't actually validate, it just reformats form_state value
 * into an array of a suitable format for nodereference module
 */
function nodereference_unalterable_autocomplete_validate($element, &$form_state) {
  form_set_value($element, array($form_state['values'][$element['#field_name']]), $form_state);
}

/**
 * Element validation function that makes title required when creating a link.
 */
function nodereference_unalterable_node_link_validate($element, &$form_state) {
  $link_settings = $form_state['values']['node_link'];
  if (($link_settings['teaser'] || $link_settings['full']) && empty($link_settings['title'])) {
    form_error($element['title'], t('A link title must be specified if creating links on referenceable content.'));
  }
}

/**
 * Implementation of hook_widget().
 */
function nodereference_unalterable_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array('#tree' => TRUE);
  $field_name = $field['field_name'];
  $field_name_url = preg_replace('/^field_/', '', $field_name);
  $referenced_nid = NULL;

  // Check for an existing NID.
  if (isset($items[0]['nid']) && is_numeric($items[0]['nid'])) {
    $referenced_nid = $items[0]['nid'];
  }

  // Check that the NID is a valid reference.
  if (!empty($referenced_nid)) {
    $valid_options = optionwidgets_options($field);
    if (!isset($valid_options[$referenced_nid])) {
      $referenced_nid = NULL;
    }
  }

  // If no NID is available or editing this field, use the fallback behavior.
  if (empty($referenced_nid) || (!empty($field['widget']['edit_fallback']) && !empty($items))) {
    // If not on a node/add page (such as editing a node that does not yet have
    // a reference), switch to using an autocomplete widget.
    if (in_array($field['widget']['fallback'], array('page_not_found', 'leave_blank')) && nodereference_unalterable_get_nid($field_name) === FALSE) {
      $field['widget']['fallback'] = 'autocomplete';
    }

    // Fallback to select list.
    if ($field['widget']['fallback'] == 'select') {
      $element = array(
        '#type' => 'nodereference_select',
        '#default_value' => $items,
        '#after_build' => array('nodereference_unalterable_process_select'),
      );
    }
    //// Fallback to autocomplete.
    //elseif ($field['widget']['fallback'] == 'autocomplete') {
    //  $element = array(
    //    '#type' => 'nodereference_autocomplete',
    //    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
    //    '#value_callback' => 'nodereference_autocomplete_value',
    //    '#element_validate' => array('nodereference_unalterable_autocomplete_validate'),
    //  );
    //}
  }

  if (isset($referenced_nid) && (empty($element['#type']))) {
    $element[0]['nid'] = array(
      '#title' => $field['widget']['label'],
      '#type' => 'nodereference_unalterable',
      '#field_name' => $field_name,
      '#default_value' => $referenced_nid,
    );
  }

  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function nodereference_unalterable_process($element, $edit, $form_state, $form) {
  $field_key = $element['#columns'][0];
  $field = $form['#field_info'][$element['#field_name']];

  if (isset($element['#value']) && is_numeric($element['#value'])) {
    $element['#display_title'] =_nodereference_titles($element['#value']);
  }
  else {
    $element['#display_title'] = t('Referenced content not found.');
  }

  $element['nid'] = array(
    '#type' => 'value',
    '#value' => isset($element['#value']) ? $element['#value'] : $element['#value'],
    '#parents' => $element['#parents'],
  );

  return $element;
}

/**
 * An #after_build function used to add an empty value to the list of options.
 *
 * Normally CCK would do this in optionwidgets_options(), but since the widget
 * type "nodereference_unalterable" isn't known by it, we have to add it manually.
 */
function nodereference_unalterable_process_select($element, $form_state) {
  if (isset($element['nid']['nid']['#options'])) {
    $field = content_fields($element['#field_name'], $element['#type_name']);
    $field['widget']['type'] = 'optionwidgets_select';

    $options = array('' => theme('optionwidgets_none', $field)) + $element['nid']['nid']['#options'];

    if ($field['widget']['restrict_callback'] && function_exists($field['widget']['restrict_callback'])) {
      $ids = call_user_func($field['widget']['restrict_callback']);
      $options = array_intersect_key($options, $ids);
    }
    $element['nid']['nid']['#options'] = $options;
  }

  return $element;
}

/**
 * Check the current URL and pull the referenced node from it.
 */
function nodereference_unalterable_get_nid($field_name) {
  $add_urls = variable_get('nodereference_unalterable_paths', array('node/add/%type/%nid'));
  $field_name_url = preg_replace('/^field_/', '', $field_name);
  $referenced_nid = NULL;

  foreach ($add_urls as $url) {
    $args = explode('/', $url);
    foreach ($args as $part => $arg) {
      // Set the target NID if matching on this part of the URL.
      if ($arg == '%nid') {
        $referenced_nid = arg($part);
      }
      // Set the target NID based on the field name, allowing for multiple
      // references in the same URL.
      elseif ($arg == '%' . $field_name_url) {
        $referenced_nid = arg($part);
      }
      // Skip any other wildcards in the URL.
      elseif (strpos($arg, '%') === 0) {
        continue;
      }
      // Arguments must line up exactly if they're not a wildcard.
      elseif (arg($part) != $arg) {
        $referenced_nid = FALSE;
        break;
      }
    }

    if ($referenced_nid) {
      break;
    }
  }

  return $referenced_nid;
}

/**
 * FAPI theme for an individual elements.
 *
 * The textfield or select is already rendered by the
 * textfield or select themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_nodereference_unalterable($element) {
  return theme('form_element', $element, '<span class="node-ref-title">'. $element['#display_title'] .'</span>');
}
